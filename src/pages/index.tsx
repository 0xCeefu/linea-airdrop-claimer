import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import {
  type BaseError,
  useWaitForTransactionReceipt,
  useWriteContract,
  useReadContract,
  useAccount
} from 'wagmi'

const Home: NextPage = () => {
  const lineaClaimAddress = "0x87bAa1694381aE3eCaE2660d97fe60404080Eb64"; // Replace with your actual claim address
  const lineaClaimAbi = [
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_account", "type": "address" }
      ],
      "name": "calculateAllocation",
      "outputs": [
        { "internalType": "uint256", "name": "tokenAllocation", "type": "uint256" }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ]

  const { data: hash, isPending, writeContract, error } = useWriteContract()
  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash
    })

  const { address, isConnected, status } = useAccount();

  const allocationResult = useReadContract({
    address: lineaClaimAddress,
    abi: lineaClaimAbi,
    functionName: 'calculateAllocation',
    args: [isConnected && address ? address : undefined],
  });
  const allocation = allocationResult.data;

  async function claim() {
    writeContract({
      address: lineaClaimAddress,
      abi: lineaClaimAbi,
      functionName: 'claim',
      args: [],
    })
  }

  const formatAllocation = (value: bigint | undefined) => {
    if (!value) return '-';
    return (Number(value) / 1e18).toFixed(6);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Linea Airdrop Claimer</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <h1 style={{ lineHeight: '1.25' }} className={styles.title}>
          Linea Airdrop Claimer Built by <a target='_blank' rel='noopener noreferrer' href="https://x.com/0xCeefu">0xCeefu</a>
        </h1>

        <ConnectButton />

        {isConnected ? (
          <>
            <div style={{ marginTop: '1em' }}>Allocation: {allocation ? formatAllocation(allocation as bigint | undefined) : '0'} LINEA </div>
            {(!allocation || (allocation as bigint) === BigInt(0)) && (
              <div style={{ color: 'red', marginTop: '8px' }}>
                The connected wallet has no LINEA allocation to claim. Please connect another wallet to check.
              </div>
            )}
            <button type="button"
              style={{ marginTop: '1em', padding: '0.5em 1em', cursor: 'pointer' }}
              onClick={claim}
              disabled={isPending || !(allocation && (allocation as bigint) > 0)}
            >
              {isPending ? 'Claiming...' : 'Claim Airdrop'}
            </button>
            {allocation && (allocation as bigint) > 0 ? (
              <div style={{ color: 'gray', marginTop: '4px', fontSize: '0.95em' }}>
                Note: Please wait until the claim is live before attempting to claim, otherwise the transaction will fail.
              </div>
            ) : null}

            {hash && <div>Transaction Hash: {hash}</div>}
            {isConfirming && <div>Waiting for confirmation...</div>}
            {isConfirmed && <div>Transaction confirmed.</div>}
            {error && (
              <div>Error: {(error as BaseError).shortMessage || error.message}</div>
            )}
          </>
        ) : (
          <div style={{ color: 'orange', marginTop: '1em' }}>
            Please connect your wallet to check your LINEA allocation and claim.
          </div>
        )}

      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Built with ðŸŒˆ
        </a>
      </footer>
    </div>
  );
};

export default Home;
